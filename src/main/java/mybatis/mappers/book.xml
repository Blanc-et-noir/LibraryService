<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="book">
	<select id="isOverdue" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT customer_id "customer_id", NVL(CEIL((SYSDATE-check_out_end_date)),0) "overdue"
		FROM check_out
		WHERE check_out_id = ${check_out_id} AND check_out_return_yn = 'N'
	</select>
	<select id="isExtensible" parameterType="java.util.HashMap" resultType="Integer">
		SELECT check_out_renew_count "check_out_renew_count"
		FROM check_out
		WHERE check_out_id = ${check_out_id}
	</select>
	<select id="getCheckOutList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<![CDATA[
			SELECT check_out_id "check_out_id", customer_id "customer_id", book_isbn "book_isbn", book_name "book_name", check_out_start_date "check_out_start_date", check_out_end_date "check_out_end_date", check_out_renew_count "check_out_renew_count", check_out_end_date-SYSDATE "diff"
			FROM check_out NATURAL JOIN book
			WHERE customer_id = #{customer_id} AND check_out_return_yn = 'N'
		]]>
	</select>
	<select id="checkCheckOutDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<![CDATA[
			SELECT TO_CHAR(check_out_date,'YYYY.MM.DD HH24:MI:SS') "check_out_date_string", ROUND(SYSDATE - check_out_date,18) "diff"
			FROM customer
			WHERE customer_id = #{customer_id}
		]]>
	</select>
	<select id="getCheckOutsCount" parameterType="java.util.HashMap" resultType="Integer">
		<![CDATA[
			SELECT COUNT(*)
			FROM check_out NATURAL JOIN customer NATURAL JOIN book
		]]>
		<where>
			<![CDATA[check_out_return_yn = 'N' AND check_out_return_yn = 'N' AND check_out_start_date >= TO_DATE(#{start_date},'YYYY-MM-DD HH24:MI:SS') AND check_out_start_date <= TO_DATE(#{end_date},'YYYY-MM-DD HH24:MI:SS')]]>
			<choose>
				<when test="flag.equals('customer_id')">AND customer_id LIKE '%'||#{search}||'%'</when>
				<when test="flag.equals('customer_name')">AND customer_name LIKE '%'||#{search}||'%'</when>
				<when test="flag.equals('book_isbn')">AND book_isbn LIKE '%'||#{search}||'%'</when>
				<when test="flag.equals('book_name')">AND book_name LIKE '%'||#{search}||'%'</when>
			</choose>
		</where>
	</select>
	<select id="listCheckOuts" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT idx "idx", check_out_id "check_out_id", book_isbn "book_isbn", book_name "book_name", customer_id "customer_id", customer_name "customer_name", check_out_start_date_string "check_out_start_date_string", check_out_end_date_string "check_out_end_date_string", check_out_renew_count "check_out_renew_count", overdue "overdue"
		FROM(
			SELECT ROW_NUMBER() OVER(ORDER BY ${orderby}) idx, check_out_id, book_isbn, book_name, customer_id, customer_name, TO_CHAR(check_out_start_date,'YYYY.MM.DD HH24:MI:SS') check_out_start_date_string, TO_CHAR(check_out_end_date,'YYYY.MM.DD HH24:MI:SS') check_out_end_date_string, check_out_renew_count,NVL(CEIL((SYSDATE-check_out_end_date)),0) overdue
			FROM check_out NATURAL JOIN customer NATURAL JOIN book
			<where>
				<![CDATA[
					check_out_return_yn = 'N' AND check_out_start_date >= TO_DATE(#{start_date},'YYYY-MM-DD HH24:MI:SS') AND check_out_start_date <= TO_DATE(#{end_date},'YYYY-MM-DD HH24:MI:SS')
				]]>
				<choose>
					<when test="flag.equals('customer_id')">AND customer_id LIKE '%'||#{search}||'%'</when>
					<when test="flag.equals('customer_name')">AND customer_name LIKE '%'||#{search}||'%'</when>
					<when test="flag.equals('book_isbn')">AND book_isbn LIKE '%'||#{search}||'%'</when>
					<when test="flag.equals('book_name')">AND book_name LIKE '%'||#{search}||'%'</when>
				</choose>
			</where>
			)
		<![CDATA[
			WHERE idx >= (((${section}-1)*100)+((${page}-1)*10)+1) AND idx <= ((${section}-1)*100+(${page})*10)
		]]>
	</select>
	
	
		
	
	<update id="decreaseBookNum" parameterType="java.util.HashMap">
		<![CDATA[
			UPDATE book
			SET book_number = book_number-1
			WHERE book_isbn = #{book_isbn}
		]]>
	</update>
	<update id="increaseBookNum" parameterType="java.util.HashMap">
		<![CDATA[
			UPDATE book B
			SET B.book_number = B.book_number+1
			WHERE B.book_isbn = (
				SELECT O.book_isbn
				FROM check_out O
				WHERE O.check_out_id = ${check_out_id})
		]]>
	</update>
	<update id="updateCheckOutDate" parameterType="java.util.HashMap">
		<![CDATA[
			UPDATE customer
			SET check_out_date =
				CASE 
					WHEN check_out_date-SYSDATE >=0 THEN check_out_date+${overdue}
					ELSE SYSDATE+${overdue}
				END
			WHERE customer_id = #{customer_id}
		]]>
	</update>

	<update id="renewBook" parameterType="java.util.HashMap">
		<![CDATA[
			UPDATE check_out
			SET check_out_end_date = check_out_end_date+7,check_out_renew_count = check_out_renew_count+1
			WHERE check_out_id = ${check_out_id}
		]]>
	</update>
	
	
	
	<insert id="insertCheckOut" parameterType="java.util.HashMap">
		<![CDATA[
			INSERT INTO check_out VALUES(check_out_sequence.NEXTVAL,#{customer_id},#{book_isbn},SYSDATE,SYSDATE+14,NULL,'N',0)
		]]>		
	</insert>
	<insert id="sendMessage" parameterType="java.util.HashMap">
		<![CDATA[
			INSERT INTO message_received
			SELECT message_received_sequence.NEXTVAL message_id,#{customer_id} sender_id,customer_id,'[도서 연체] : '||book_name||'도서에 대한 연체 알림입니다.' message_title,'ISBN : '||book_isbn||CHR(10)||CHR(13)||'도서명 : '||book_name||CHR(10)||CHR(13)||'대출 시각 : '||TO_DATE(check_out_start_date,'YYYY.MM.DD HH24:MI:SS')||CHR(10)||CHR(13)||'반납기한 : '||TO_DATE(check_out_end_date,'YYYY.MM.DD HH24:MI:SS')||CHR(10)||CHR(13)||'연체 기한 : '||NVL(CEIL((SYSDATE-check_out_end_date)),0)||CHR(10)||CHR(13)||'연장 횟수 : '||check_out_renew_count||CHR(10)||CHR(13)||'* 연체된 기간만큼 새로 도서를 대출할 수 없습니다.'||CHR(10)||CHR(13)||'* 대출기간을 연장하면 반납기한을 늦출 수 있습니다.' message_content,SYSDATE message_date
			FROM check_out NATURAL JOIN book
			WHERE SYSDATE - check_out_end_date > 0
		]]>		
	</insert>
	
	
	
	<update id="returnBook" parameterType="java.util.HashMap">
		UPDATE check_out
		SET check_out_return_yn = 'Y', check_out_return_date = SYSDATE
		WHERE check_out_id = ${check_out_id}
	</update>
</mapper>